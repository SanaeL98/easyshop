{
	"info": {
		"_postman_id": "38fcc73a-80a6-4790-9f55-d95f41709775",
		"name": "easyshop - solo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46074074",
		"_collection_link": "https://test33-4371.postman.co/workspace/EasyShop-API~9fa55cd3-c51a-4e4f-ac41-9093ef964113/collection/46074074-38fcc73a-80a6-4790-9f55-d95f41709775?action=share&source=collection_link&creator=46074074"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Registration should succeed\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"admin2\",\r\n  \"password\": \"password\",\r\n  \"confirmPassword\": \"password\",\r\n  \"role\": \"ADMIN\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"userToken\", pm.response.json().token);\r",
							"\r",
							"pm.test(\"User Login should create token\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.have.jsonBody(\"token\");\r",
							"    pm.expect(pm.environment.get(\"userToken\")).to.not.equal(\"\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{newUserName}}\",\r\n  \"password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "GET http://localhost:8080/categories\n",
					"protocol": "GET http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"adminToken\", pm.response.json().token)\r",
							"\r",
							"pm.test(\"Admin Login should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var items = pm.response.json();\r",
							"\r",
							"pm.test(\"Categories should be \" + items.length, function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(items.length).to.equal(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Category - not admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Category insert as non admin should fail\", function() {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Demo\",\r\n    \"description\": \"Some demo category.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var items = pm.response.json();\r",
							"\r",
							"pm.test(\"Categories should be \" + items.length, function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(items.length).to.equal(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Category - as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"newCategoryId\", pm.response.json().categoryId)\r",
							"\r",
							"var name = pm.response.json().name;\r",
							"\r",
							"pm.test(\"Category insert as admin should succeed\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.expect(name).to.equal(\"Demo\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOIiwiZXhwIjoxNzUwODEwNjE2fQ.ux66HLX3wCUEVGy0CqNtEhBuXChwJx3beguIEXPKRwxAcm5ffNGSkpIfzzrEanBuMrt23TdKFk1DyqJdckqxvg",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Accessories\",\r\n  \"description\": \"Phone and computer accessories\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Categories - after add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var items = pm.response.json();\r",
							"\r",
							"pm.test(\"Categories should be \" + items.length, function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(items.length).to.equal(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get New Category By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var name = pm.response.json().name;\r",
							"\r",
							"pm.test(\"Get new category by id should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(name).to.equal(\"Demo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/categories/{{newCategoryId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"{{newCategoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Category - as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete new category should succeed\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Demo\",\r\n    \"description\": \"Some demo category.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories/{{newCategoryId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"{{newCategoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Category By Id - after delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get new category after delete should not be found \", function() {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/categories/{{newCategoryId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"{{newCategoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"pm.test('Number of products = ' + data.length, function () {\r",
							"    pm.expect(data.length).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "userToken",
			"value": "userToken",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "adminToken",
			"type": "string"
		},
		{
			"key": "newCategoryId",
			"value": "3",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "newUserName",
			"value": "gary",
			"type": "string"
		},
		{
			"key": "newUserPassword",
			"value": "thePass",
			"type": "string"
		}
	]
}